$date
	Sun Jun 29 19:12:28 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module incrementer8b_tb $end
$var wire 8 ! S_TB [7:0] $end
$var wire 1 " Cout_TB $end
$var reg 8 # A_TB [7:0] $end
$scope module DUT $end
$var wire 8 $ A [7:0] $end
$var wire 8 % S [7:0] $end
$var wire 1 " Cout $end
$scope module FA8B $end
$var wire 8 & A [7:0] $end
$var wire 8 ' B [7:0] $end
$var wire 1 ( Cin $end
$var wire 7 ) carry [6:0] $end
$var wire 8 * S [7:0] $end
$var wire 1 " Cout $end
$scope module FA0 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 ( Cin $end
$var wire 1 - xor_temp $end
$var wire 1 . or1_temp $end
$var wire 1 / and3_temp $end
$var wire 1 0 and2_temp $end
$var wire 1 1 and1_temp $end
$var wire 1 2 S $end
$var wire 1 3 Cout $end
$scope module and1 $end
$var wire 1 , A $end
$var wire 1 ( B $end
$var wire 1 1 Y $end
$var wire 1 4 w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 0 Y $end
$var wire 1 5 w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 + A $end
$var wire 1 ( B $end
$var wire 1 / Y $end
$var wire 1 6 w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 1 A $end
$var wire 1 0 B $end
$var wire 1 . Y $end
$var wire 1 7 w1 $end
$var wire 1 8 w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 . A $end
$var wire 1 / B $end
$var wire 1 3 Y $end
$var wire 1 9 w1 $end
$var wire 1 : w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 - Y $end
$var wire 1 ; w1 $end
$var wire 1 < w2 $end
$var wire 1 = w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 - A $end
$var wire 1 ( B $end
$var wire 1 2 Y $end
$var wire 1 > w1 $end
$var wire 1 ? w2 $end
$var wire 1 @ w3 $end
$upscope $end
$upscope $end
$scope module FA1 $end
$var wire 1 A A $end
$var wire 1 B B $end
$var wire 1 C Cin $end
$var wire 1 D xor_temp $end
$var wire 1 E or1_temp $end
$var wire 1 F and3_temp $end
$var wire 1 G and2_temp $end
$var wire 1 H and1_temp $end
$var wire 1 I S $end
$var wire 1 J Cout $end
$scope module and1 $end
$var wire 1 B A $end
$var wire 1 C B $end
$var wire 1 H Y $end
$var wire 1 K w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 A A $end
$var wire 1 B B $end
$var wire 1 G Y $end
$var wire 1 L w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 A A $end
$var wire 1 C B $end
$var wire 1 F Y $end
$var wire 1 M w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 H A $end
$var wire 1 G B $end
$var wire 1 E Y $end
$var wire 1 N w1 $end
$var wire 1 O w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 E A $end
$var wire 1 F B $end
$var wire 1 J Y $end
$var wire 1 P w1 $end
$var wire 1 Q w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 A A $end
$var wire 1 B B $end
$var wire 1 D Y $end
$var wire 1 R w1 $end
$var wire 1 S w2 $end
$var wire 1 T w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 D A $end
$var wire 1 C B $end
$var wire 1 I Y $end
$var wire 1 U w1 $end
$var wire 1 V w2 $end
$var wire 1 W w3 $end
$upscope $end
$upscope $end
$scope module FA2 $end
$var wire 1 X A $end
$var wire 1 Y B $end
$var wire 1 Z Cin $end
$var wire 1 [ xor_temp $end
$var wire 1 \ or1_temp $end
$var wire 1 ] and3_temp $end
$var wire 1 ^ and2_temp $end
$var wire 1 _ and1_temp $end
$var wire 1 ` S $end
$var wire 1 a Cout $end
$scope module and1 $end
$var wire 1 Y A $end
$var wire 1 Z B $end
$var wire 1 _ Y $end
$var wire 1 b w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 X A $end
$var wire 1 Y B $end
$var wire 1 ^ Y $end
$var wire 1 c w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 X A $end
$var wire 1 Z B $end
$var wire 1 ] Y $end
$var wire 1 d w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 _ A $end
$var wire 1 ^ B $end
$var wire 1 \ Y $end
$var wire 1 e w1 $end
$var wire 1 f w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 \ A $end
$var wire 1 ] B $end
$var wire 1 a Y $end
$var wire 1 g w1 $end
$var wire 1 h w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 X A $end
$var wire 1 Y B $end
$var wire 1 [ Y $end
$var wire 1 i w1 $end
$var wire 1 j w2 $end
$var wire 1 k w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 [ A $end
$var wire 1 Z B $end
$var wire 1 ` Y $end
$var wire 1 l w1 $end
$var wire 1 m w2 $end
$var wire 1 n w3 $end
$upscope $end
$upscope $end
$scope module FA3 $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 q Cin $end
$var wire 1 r xor_temp $end
$var wire 1 s or1_temp $end
$var wire 1 t and3_temp $end
$var wire 1 u and2_temp $end
$var wire 1 v and1_temp $end
$var wire 1 w S $end
$var wire 1 x Cout $end
$scope module and1 $end
$var wire 1 p A $end
$var wire 1 q B $end
$var wire 1 v Y $end
$var wire 1 y w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 u Y $end
$var wire 1 z w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 o A $end
$var wire 1 q B $end
$var wire 1 t Y $end
$var wire 1 { w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 v A $end
$var wire 1 u B $end
$var wire 1 s Y $end
$var wire 1 | w1 $end
$var wire 1 } w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 s A $end
$var wire 1 t B $end
$var wire 1 x Y $end
$var wire 1 ~ w1 $end
$var wire 1 !" w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 r Y $end
$var wire 1 "" w1 $end
$var wire 1 #" w2 $end
$var wire 1 $" w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 r A $end
$var wire 1 q B $end
$var wire 1 w Y $end
$var wire 1 %" w1 $end
$var wire 1 &" w2 $end
$var wire 1 '" w3 $end
$upscope $end
$upscope $end
$scope module FA4 $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 *" Cin $end
$var wire 1 +" xor_temp $end
$var wire 1 ," or1_temp $end
$var wire 1 -" and3_temp $end
$var wire 1 ." and2_temp $end
$var wire 1 /" and1_temp $end
$var wire 1 0" S $end
$var wire 1 1" Cout $end
$scope module and1 $end
$var wire 1 )" A $end
$var wire 1 *" B $end
$var wire 1 /" Y $end
$var wire 1 2" w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 ." Y $end
$var wire 1 3" w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 (" A $end
$var wire 1 *" B $end
$var wire 1 -" Y $end
$var wire 1 4" w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 /" A $end
$var wire 1 ." B $end
$var wire 1 ," Y $end
$var wire 1 5" w1 $end
$var wire 1 6" w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 ," A $end
$var wire 1 -" B $end
$var wire 1 1" Y $end
$var wire 1 7" w1 $end
$var wire 1 8" w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 +" Y $end
$var wire 1 9" w1 $end
$var wire 1 :" w2 $end
$var wire 1 ;" w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 +" A $end
$var wire 1 *" B $end
$var wire 1 0" Y $end
$var wire 1 <" w1 $end
$var wire 1 =" w2 $end
$var wire 1 >" w3 $end
$upscope $end
$upscope $end
$scope module FA5 $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 A" Cin $end
$var wire 1 B" xor_temp $end
$var wire 1 C" or1_temp $end
$var wire 1 D" and3_temp $end
$var wire 1 E" and2_temp $end
$var wire 1 F" and1_temp $end
$var wire 1 G" S $end
$var wire 1 H" Cout $end
$scope module and1 $end
$var wire 1 @" A $end
$var wire 1 A" B $end
$var wire 1 F" Y $end
$var wire 1 I" w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 E" Y $end
$var wire 1 J" w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 ?" A $end
$var wire 1 A" B $end
$var wire 1 D" Y $end
$var wire 1 K" w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 F" A $end
$var wire 1 E" B $end
$var wire 1 C" Y $end
$var wire 1 L" w1 $end
$var wire 1 M" w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 C" A $end
$var wire 1 D" B $end
$var wire 1 H" Y $end
$var wire 1 N" w1 $end
$var wire 1 O" w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 B" Y $end
$var wire 1 P" w1 $end
$var wire 1 Q" w2 $end
$var wire 1 R" w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 B" A $end
$var wire 1 A" B $end
$var wire 1 G" Y $end
$var wire 1 S" w1 $end
$var wire 1 T" w2 $end
$var wire 1 U" w3 $end
$upscope $end
$upscope $end
$scope module FA6 $end
$var wire 1 V" A $end
$var wire 1 W" B $end
$var wire 1 X" Cin $end
$var wire 1 Y" xor_temp $end
$var wire 1 Z" or1_temp $end
$var wire 1 [" and3_temp $end
$var wire 1 \" and2_temp $end
$var wire 1 ]" and1_temp $end
$var wire 1 ^" S $end
$var wire 1 _" Cout $end
$scope module and1 $end
$var wire 1 W" A $end
$var wire 1 X" B $end
$var wire 1 ]" Y $end
$var wire 1 `" w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 V" A $end
$var wire 1 W" B $end
$var wire 1 \" Y $end
$var wire 1 a" w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 V" A $end
$var wire 1 X" B $end
$var wire 1 [" Y $end
$var wire 1 b" w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 ]" A $end
$var wire 1 \" B $end
$var wire 1 Z" Y $end
$var wire 1 c" w1 $end
$var wire 1 d" w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 Z" A $end
$var wire 1 [" B $end
$var wire 1 _" Y $end
$var wire 1 e" w1 $end
$var wire 1 f" w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 V" A $end
$var wire 1 W" B $end
$var wire 1 Y" Y $end
$var wire 1 g" w1 $end
$var wire 1 h" w2 $end
$var wire 1 i" w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 Y" A $end
$var wire 1 X" B $end
$var wire 1 ^" Y $end
$var wire 1 j" w1 $end
$var wire 1 k" w2 $end
$var wire 1 l" w3 $end
$upscope $end
$upscope $end
$scope module FA7 $end
$var wire 1 m" A $end
$var wire 1 n" B $end
$var wire 1 o" Cin $end
$var wire 1 p" xor_temp $end
$var wire 1 q" or1_temp $end
$var wire 1 r" and3_temp $end
$var wire 1 s" and2_temp $end
$var wire 1 t" and1_temp $end
$var wire 1 u" S $end
$var wire 1 " Cout $end
$scope module and1 $end
$var wire 1 n" A $end
$var wire 1 o" B $end
$var wire 1 t" Y $end
$var wire 1 v" w1 $end
$upscope $end
$scope module and2 $end
$var wire 1 m" A $end
$var wire 1 n" B $end
$var wire 1 s" Y $end
$var wire 1 w" w1 $end
$upscope $end
$scope module and3 $end
$var wire 1 m" A $end
$var wire 1 o" B $end
$var wire 1 r" Y $end
$var wire 1 x" w1 $end
$upscope $end
$scope module or1 $end
$var wire 1 t" A $end
$var wire 1 s" B $end
$var wire 1 q" Y $end
$var wire 1 y" w1 $end
$var wire 1 z" w2 $end
$upscope $end
$scope module or2 $end
$var wire 1 q" A $end
$var wire 1 r" B $end
$var wire 1 " Y $end
$var wire 1 {" w1 $end
$var wire 1 |" w2 $end
$upscope $end
$scope module xor1 $end
$var wire 1 m" A $end
$var wire 1 n" B $end
$var wire 1 p" Y $end
$var wire 1 }" w1 $end
$var wire 1 ~" w2 $end
$var wire 1 !# w3 $end
$upscope $end
$scope module xor2 $end
$var wire 1 p" A $end
$var wire 1 o" B $end
$var wire 1 u" Y $end
$var wire 1 "# w1 $end
$var wire 1 ## w2 $end
$var wire 1 $# w3 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1$#
1##
1"#
1!#
1~"
1}"
1|"
1{"
1z"
1y"
1x"
1w"
1v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
1l"
1k"
1j"
1i"
1h"
1g"
1f"
1e"
1d"
1c"
1b"
1a"
1`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
1U"
1T"
1S"
1R"
1Q"
1P"
1O"
1N"
1M"
1L"
1K"
1J"
1I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
1>"
1="
1<"
1;"
1:"
19"
18"
17"
16"
15"
14"
13"
12"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
1'"
1&"
1%"
1$"
1#"
1""
1!"
1~
1}
1|
1{
1z
1y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
1n
1m
1l
1k
1j
1i
1h
1g
1f
1e
1d
1c
1b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
1W
1V
1U
1T
1S
1R
1Q
1P
1O
1N
1M
1L
1K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
1?
1>
1=
1<
1;
1:
19
18
17
16
15
14
03
12
01
00
0/
0.
0-
0,
0+
b1 *
b0 )
1(
b0 '
b0 &
b1 %
b0 $
b0 #
0"
b1 !
$end
#10
1I
0W
1C
b10 !
b10 %
b10 *
02
b1 )
13
1@
0:
0>
1?
1/
1-
06
0<
1+
b1 #
b1 $
b1 &
#20
10"
0>"
1*"
1x
0!"
1t
0{
0%"
1'"
1q
1a
0h
1]
0d
0l
1n
1Z
0I
b1111 )
1J
1W
0`
b10000 !
b10000 %
b10000 *
0w
0Q
0U
1V
1m
1&"
1F
1D
1[
1r
0M
0S
0j
0#"
1A
1X
1o
b1111 #
b1111 $
b1111 &
#30
1"
0|"
1r"
0x"
0"#
1$#
1o"
1_"
0f"
1["
0b"
0j"
1l"
1X"
1H"
0O"
1D"
0K"
0S"
1U"
1A"
00"
b1111111 )
11"
1>"
0G"
0^"
b0 !
b0 %
b0 *
0u"
08"
0<"
1="
1T"
1k"
1##
1-"
1+"
1B"
1Y"
1p"
04"
0:"
0Q"
0h"
0~"
1("
1?"
1V"
1m"
b11111111 #
b11111111 $
b11111111 &
#40
