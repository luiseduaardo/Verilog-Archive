$date
	Sat Aug 09 12:05:05 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_memory $end
$var wire 8 ! port_out_15 [7:0] $end
$var wire 8 " port_out_14 [7:0] $end
$var wire 8 # port_out_13 [7:0] $end
$var wire 8 $ port_out_12 [7:0] $end
$var wire 8 % port_out_11 [7:0] $end
$var wire 8 & port_out_10 [7:0] $end
$var wire 8 ' port_out_09 [7:0] $end
$var wire 8 ( port_out_08 [7:0] $end
$var wire 8 ) port_out_07 [7:0] $end
$var wire 8 * port_out_06 [7:0] $end
$var wire 8 + port_out_05 [7:0] $end
$var wire 8 , port_out_04 [7:0] $end
$var wire 8 - port_out_03 [7:0] $end
$var wire 8 . port_out_02 [7:0] $end
$var wire 8 / port_out_01 [7:0] $end
$var wire 8 0 port_out_00 [7:0] $end
$var wire 8 1 data_out [7:0] $end
$var reg 8 2 address [7:0] $end
$var reg 1 3 clk $end
$var reg 8 4 data_in [7:0] $end
$var reg 8 5 port_in_00 [7:0] $end
$var reg 8 6 port_in_01 [7:0] $end
$var reg 8 7 port_in_02 [7:0] $end
$var reg 8 8 port_in_03 [7:0] $end
$var reg 8 9 port_in_04 [7:0] $end
$var reg 8 : port_in_05 [7:0] $end
$var reg 8 ; port_in_06 [7:0] $end
$var reg 8 < port_in_07 [7:0] $end
$var reg 8 = port_in_08 [7:0] $end
$var reg 8 > port_in_09 [7:0] $end
$var reg 8 ? port_in_10 [7:0] $end
$var reg 8 @ port_in_11 [7:0] $end
$var reg 8 A port_in_12 [7:0] $end
$var reg 8 B port_in_13 [7:0] $end
$var reg 8 C port_in_14 [7:0] $end
$var reg 8 D port_in_15 [7:0] $end
$var reg 1 E reset $end
$var reg 1 F write $end
$scope module dut $end
$var wire 8 G address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 H data_in [7:0] $end
$var wire 8 I port_in_00 [7:0] $end
$var wire 8 J port_in_01 [7:0] $end
$var wire 8 K port_in_02 [7:0] $end
$var wire 8 L port_in_03 [7:0] $end
$var wire 8 M port_in_04 [7:0] $end
$var wire 8 N port_in_05 [7:0] $end
$var wire 8 O port_in_06 [7:0] $end
$var wire 8 P port_in_07 [7:0] $end
$var wire 8 Q port_in_08 [7:0] $end
$var wire 8 R port_in_09 [7:0] $end
$var wire 8 S port_in_10 [7:0] $end
$var wire 8 T port_in_11 [7:0] $end
$var wire 8 U port_in_12 [7:0] $end
$var wire 8 V port_in_13 [7:0] $end
$var wire 8 W port_in_14 [7:0] $end
$var wire 8 X port_in_15 [7:0] $end
$var wire 1 E reset $end
$var wire 1 F write $end
$var wire 8 Y rwm_out [7:0] $end
$var wire 8 Z rom_out [7:0] $end
$var wire 8 [ port_out_15 [7:0] $end
$var wire 8 \ port_out_14 [7:0] $end
$var wire 8 ] port_out_13 [7:0] $end
$var wire 8 ^ port_out_12 [7:0] $end
$var wire 8 _ port_out_11 [7:0] $end
$var wire 8 ` port_out_10 [7:0] $end
$var wire 8 a port_out_09 [7:0] $end
$var wire 8 b port_out_08 [7:0] $end
$var wire 8 c port_out_07 [7:0] $end
$var wire 8 d port_out_06 [7:0] $end
$var wire 8 e port_out_05 [7:0] $end
$var wire 8 f port_out_04 [7:0] $end
$var wire 8 g port_out_03 [7:0] $end
$var wire 8 h port_out_02 [7:0] $end
$var wire 8 i port_out_01 [7:0] $end
$var wire 8 j port_out_00 [7:0] $end
$var reg 8 k data_out [7:0] $end
$scope module OUT $end
$var wire 8 l address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 m data_in [7:0] $end
$var wire 1 E reset $end
$var wire 1 F write $end
$var reg 8 n port_out_00 [7:0] $end
$var reg 8 o port_out_01 [7:0] $end
$var reg 8 p port_out_02 [7:0] $end
$var reg 8 q port_out_03 [7:0] $end
$var reg 8 r port_out_04 [7:0] $end
$var reg 8 s port_out_05 [7:0] $end
$var reg 8 t port_out_06 [7:0] $end
$var reg 8 u port_out_07 [7:0] $end
$var reg 8 v port_out_08 [7:0] $end
$var reg 8 w port_out_09 [7:0] $end
$var reg 8 x port_out_10 [7:0] $end
$var reg 8 y port_out_11 [7:0] $end
$var reg 8 z port_out_12 [7:0] $end
$var reg 8 { port_out_13 [7:0] $end
$var reg 8 | port_out_14 [7:0] $end
$var reg 8 } port_out_15 [7:0] $end
$upscope $end
$scope module ROM $end
$var wire 8 ~ address [7:0] $end
$var wire 1 3 clk $end
$var parameter 8 !" ADD_AB $end
$var parameter 8 "" AND_AB $end
$var parameter 8 #" BCC $end
$var parameter 8 $" BCS $end
$var parameter 8 %" BEQ $end
$var parameter 8 &" BMI $end
$var parameter 8 '" BNE $end
$var parameter 8 (" BPL $end
$var parameter 8 )" BRA $end
$var parameter 8 *" BVC $end
$var parameter 8 +" BVS $end
$var parameter 8 ," DECA $end
$var parameter 8 -" DECB $end
$var parameter 8 ." INCA $end
$var parameter 8 /" INCB $end
$var parameter 8 0" LDA_DIR $end
$var parameter 8 1" LDA_IMM $end
$var parameter 8 2" LDB_DIR $end
$var parameter 8 3" LDB_IMM $end
$var parameter 8 4" NOTA $end
$var parameter 8 5" NOTB $end
$var parameter 8 6" OR_AB $end
$var parameter 8 7" STA_DIR $end
$var parameter 8 8" STB_DIR $end
$var parameter 8 9" SUB_AB $end
$var parameter 8 :" XOR_AB $end
$var reg 1 ;" EN $end
$var reg 8 <" data_out [7:0] $end
$upscope $end
$scope module RWM $end
$var wire 1 F WE $end
$var wire 8 =" address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 >" data_in [7:0] $end
$var reg 1 ?" EN $end
$var reg 8 @" data_out [7:0] $end
$upscope $end
$scope begin MUX $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1001010 :"
b1000011 9"
b10010111 8"
b10010110 7"
b1000101 6"
b1001100 5"
b1001011 4"
b10001000 3"
b10001001 2"
b10000110 1"
b10000111 0"
b1000111 /"
b1000110 ."
b1001001 -"
b1001000 ,"
b100101 +"
b100110 *"
b100000 )"
b100010 ("
b100100 '"
b100001 &"
b100011 %"
b100111 $"
b101000 #"
b1000100 ""
b1000010 !"
$end
#0
$dumpvars
bx @"
0?"
b0 >"
b0 ="
bx <"
1;"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
bx k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
bx Z
bx Y
b11101111 X
b11001101 W
b10101011 V
b10011001 U
b10001000 T
b1110111 S
b1100110 R
b1010101 Q
b1000100 P
b110011 O
b100010 N
b10001 M
b11011101 L
b11001100 K
b10111011 J
b10101010 I
b0 H
b0 G
0F
0E
b11101111 D
b11001101 C
b10101011 B
b10011001 A
b10001000 @
b1110111 ?
b1100110 >
b1010101 =
b1000100 <
b110011 ;
b100010 :
b10001 9
b11011101 8
b11001100 7
b10111011 6
b10101010 5
b0 4
03
b0 2
bx 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#5000
b10000110 1
b10000110 k
b10000110 Z
b10000110 <"
13
#10000
1E
03
#15000
13
#20000
0;"
1?"
bx 1
bx k
1F
b1011010 4
b1011010 H
b1011010 m
b1011010 >"
b10000000 2
b10000000 G
b10000000 l
b10000000 ~
b10000000 ="
03
#25000
13
#30000
0F
03
#35000
b1011010 1
b1011010 k
b1011010 Y
b1011010 @"
13
#40000
0?"
1F
b11110001 4
b11110001 H
b11110001 m
b11110001 >"
b11100000 2
b11100000 G
b11100000 l
b11100000 ~
b11100000 ="
03
#45000
b11110001 0
b11110001 j
b11110001 n
13
#50000
0F
03
#55000
13
#60000
1F
b11110010 4
b11110010 H
b11110010 m
b11110010 >"
b11100001 2
b11100001 G
b11100001 l
b11100001 ~
b11100001 ="
03
#65000
b11110010 /
b11110010 i
b11110010 o
13
#70000
0F
03
#75000
13
#80000
1;"
b10000110 1
b10000110 k
b0 2
b0 G
b0 l
b0 ~
b0 ="
03
#85000
13
#90000
0;"
b10101010 1
b10101010 k
b11110000 2
b11110000 G
b11110000 l
b11110000 ~
b11110000 ="
03
#95000
13
#100000
b10111011 1
b10111011 k
b11110001 2
b11110001 G
b11110001 l
b11110001 ~
b11110001 ="
03
#105000
13
#110000
03
#115000
13
#120000
03
#125000
13
